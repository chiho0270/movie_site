{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chiho\\\\Desktop\\\\test\\\\movie_site\\\\frontend\\\\src\\\\commons\\\\Main.jsx\",\n  _s = $RefreshSig$();\n/**\r\n * 주소 : /commons/Main.js\r\n * 설명 : 메인 페이지\r\n * 작성자 : 신주안\r\n * 작성일 : 2025.05.15\r\n * 수정일 : \r\n * 기능 : 영화 사이트의 메인 화면\r\n *      - 인기 영화 섹션\r\n *          - 현재 인기 있는 영화 리스트 출력 (포스터, 제목, 출시년도, 제작 국가, 평균 별점)\r\n *          - 영화 클릭 시 해당 영화의 상세 페이지로 이동\r\n *      - 검색 기능\r\n *          - 검색창에 영화 제목 입력 시 관련 영화 리스트 출력\r\n *          - 검색 결과 클릭 시 해당 영화의 상세 페이지로 이동\r\n *          - 검색창 백그라운드에 슬라이드형 이미지(최신 영화 포스터) 출력\r\n *          - 우측 화살표 버튼 : 클릭 시 다음 이미지로 슬라이드\r\n *          - 좌측 화살표 버튼 : 클릭 시 이전 이미지로 슬라이드\r\n *      - 태그 기능\r\n *        - 태그 클릭 시 해당 태그에 맞는 영화 리스트 출력\r\n *      - 로그인 상태 확인\r\n *          - 로그인 상태에 따라 상단 메뉴(로그인/로그아웃 버튼) 변경\r\n *            - 로그인 상태 : 사용자 ID, 로그아웃 버튼\r\n *                - 로그아웃 버튼 클릭 시 로그아웃 요청\r\n *                - 로그아웃 성공 시 메인 페이지로 이동\r\n *            - 비로그인 상태 : 로그인, 회원가입 버튼\r\n *                - 로그인 버튼 클릭 시 로그인 페이지로 이동\r\n *                - 회원가입 버튼 클릭 시 회원가입 페이지로 이동\r\n *                - \r\n * 백 요청 :\r\n *      - /api/search/boxoffice       # movies -> search , popular -> boxoffice\r\n *          - 박스오피스 순위 리스트 요청\r\n *          - 영화 제목 검색 요청\r\n *          - 사용자 로그인 상태 확인 요청\r\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Header\";\nimport MovieSection from \"../components/MovieSection\";\nimport BannerSlider from \"../components/BannerSlider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage({\n  isLoggedIn,\n  user,\n  onLogout\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setLoading(true);\n      setError(\"\");\n      try {\n        // 박스오피스 순위로 영화 목록 가져오기\n        const res = await fetch(\"/api/boxoffice\");\n        const data = await res.json();\n        setMovies(data.movies || []);\n      } catch (err) {\n        setError(\"영화 목록을 불러오지 못했습니다.\");\n      }\n      setLoading(false);\n    };\n    fetchMovies();\n  }, []);\n  const bannerImages = movies.slice(0, 5).map(movie => movie.poster_url);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full overflow-x-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isLoggedIn: isLoggedIn,\n      user: user,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BannerSlider, {\n        images: bannerImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"search-title\",\n          children: \"\\uC5B4\\uB5A4 \\uC601\\uD654\\uB97C \\uCC3E\\uC73C\\uC2ED\\uB2C8\\uAE4C?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search\",\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"search-description\",\n          children: \"\\uC7A5\\uB974 \\uB610\\uB294 \\uD0DC\\uADF8\\uB85C \\uD0D0\\uC0C9\\uD574\\uBCF4\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tag-list\",\n          style: {\n            marginTop: \"1rem\",\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: \"0.5rem\",\n            justifyContent: \"center\"\n          },\n          children: [\"액션\", \"범죄\", \"SF\", \"코미디\", \"로맨스\", \"스릴러\", \"공포\", \"드라마\", \"멜로/로맨스\", \"미스터리\", \"판타지\", \"누아르\", \"역사\", \"전쟁\", \"재난\", \"어린이\", \"오피스\", \"요리\"].map(tag => /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              padding: \"0.4rem 0.8rem\",\n              borderRadius: \"9999px\",\n              background: \"transparent\",\n              color: \"white\",\n              border: \"1px solid white\",\n              cursor: \"pointer\",\n              fontSize: \"0.9rem\"\n            },\n            children: tag\n          }, tag, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-title\",\n      children: \"\\uC778\\uAE30 \\uC601\\uD654\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white',\n        textAlign: 'center',\n        margin: '2rem'\n      },\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: '#ff6464',\n        textAlign: 'center',\n        margin: '2rem'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(MovieSection, {\n      movies: movies.slice() // 원본 배열 보호\n      .sort((a, b) => {\n        if (a.rank && b.rank) return a.rank - b.rank;\n        if (a.rank) return -1;\n        if (b.rank) return 1;\n        return 0;\n      }).map(m => ({\n        id: m.tmdb_id,\n        posterUrl: m.poster_url,\n        title: m.title,\n        releaseDate: m.release_date,\n        country: m.country,\n        genre: m.genreAlt || \"\"\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(MainPage, \"hh0Zm++SFtCRsURt136ZBmr6u8Y=\");\n_c = MainPage;\n;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","MovieSection","BannerSlider","jsxDEV","_jsxDEV","MainPage","isLoggedIn","user","onLogout","_s","movies","setMovies","loading","setLoading","error","setError","fetchMovies","res","fetch","data","json","err","bannerImages","slice","map","movie","poster_url","className","children","fileName","_jsxFileName","lineNumber","columnNumber","images","type","placeholder","style","marginTop","display","flexWrap","gap","justifyContent","tag","padding","borderRadius","background","color","border","cursor","fontSize","textAlign","margin","sort","a","b","rank","m","id","tmdb_id","posterUrl","title","releaseDate","release_date","country","genre","genreAlt","_c","$RefreshReg$"],"sources":["C:/Users/chiho/Desktop/test/movie_site/frontend/src/commons/Main.jsx"],"sourcesContent":["/**\r\n * 주소 : /commons/Main.js\r\n * 설명 : 메인 페이지\r\n * 작성자 : 신주안\r\n * 작성일 : 2025.05.15\r\n * 수정일 : \r\n * 기능 : 영화 사이트의 메인 화면\r\n *      - 인기 영화 섹션\r\n *          - 현재 인기 있는 영화 리스트 출력 (포스터, 제목, 출시년도, 제작 국가, 평균 별점)\r\n *          - 영화 클릭 시 해당 영화의 상세 페이지로 이동\r\n *      - 검색 기능\r\n *          - 검색창에 영화 제목 입력 시 관련 영화 리스트 출력\r\n *          - 검색 결과 클릭 시 해당 영화의 상세 페이지로 이동\r\n *          - 검색창 백그라운드에 슬라이드형 이미지(최신 영화 포스터) 출력\r\n *          - 우측 화살표 버튼 : 클릭 시 다음 이미지로 슬라이드\r\n *          - 좌측 화살표 버튼 : 클릭 시 이전 이미지로 슬라이드\r\n *      - 태그 기능\r\n *        - 태그 클릭 시 해당 태그에 맞는 영화 리스트 출력\r\n *      - 로그인 상태 확인\r\n *          - 로그인 상태에 따라 상단 메뉴(로그인/로그아웃 버튼) 변경\r\n *            - 로그인 상태 : 사용자 ID, 로그아웃 버튼\r\n *                - 로그아웃 버튼 클릭 시 로그아웃 요청\r\n *                - 로그아웃 성공 시 메인 페이지로 이동\r\n *            - 비로그인 상태 : 로그인, 회원가입 버튼\r\n *                - 로그인 버튼 클릭 시 로그인 페이지로 이동\r\n *                - 회원가입 버튼 클릭 시 회원가입 페이지로 이동\r\n *                - \r\n * 백 요청 :\r\n *      - /api/search/boxoffice       # movies -> search , popular -> boxoffice\r\n *          - 박스오피스 순위 리스트 요청\r\n *          - 영화 제목 검색 요청\r\n *          - 사용자 로그인 상태 확인 요청\r\n */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport MovieSection from \"../components/MovieSection\";\r\nimport BannerSlider from \"../components/BannerSlider\";\r\n\r\nfunction MainPage({ isLoggedIn, user, onLogout }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const fetchMovies = async () => {\r\n            setLoading(true);\r\n            setError(\"\");\r\n            try {\r\n                // 박스오피스 순위로 영화 목록 가져오기\r\n                const res = await fetch(\"/api/boxoffice\");\r\n                const data = await res.json();\r\n                setMovies(data.movies || []);\r\n            } catch (err) {\r\n                setError(\"영화 목록을 불러오지 못했습니다.\");\r\n            }\r\n            setLoading(false);\r\n        };\r\n        fetchMovies();\r\n    }, []);\r\n\r\n    const bannerImages = movies.slice(0, 5).map((movie) => movie.poster_url);\r\n\r\n    return (\r\n        <div className=\"w-full overflow-x-hidden\">\r\n            <Header isLoggedIn={isLoggedIn} user={user} onLogout={onLogout} />\r\n\r\n            <div>\r\n                <BannerSlider images={bannerImages} />\r\n                <div className=\"search-overlay\">\r\n                    <h1 className=\"search-title\">어떤 영화를 찾으십니까?</h1>\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                        className=\"search-input\"\r\n                    />\r\n                    <p className=\"search-description\">\r\n                        장르 또는 태그로 탐색해보세요.\r\n                    </p>\r\n                    <div className=\"tag-list\" style={{\r\n                        marginTop: \"1rem\",\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\",\r\n                        gap: \"0.5rem\",\r\n                        justifyContent: \"center\",\r\n                    }}>\r\n                        {[\"액션\", \"범죄\", \"SF\", \"코미디\", \"로맨스\", \"스릴러\", \"공포\", \"드라마\", \"멜로/로맨스\", \"미스터리\", \"판타지\", \"누아르\", \"역사\", \"전쟁\", \"재난\", \"어린이\", \"오피스\", \"요리\"].map((tag) => (\r\n                            <button \r\n                            key={tag}\r\n                            style={{\r\n                                padding: \"0.4rem 0.8rem\",\r\n                                borderRadius: \"9999px\",\r\n                                background: \"transparent\",\r\n                                color: \"white\",\r\n                                border: \"1px solid white\",\r\n                                cursor: \"pointer\",\r\n                                fontSize: \"0.9rem\",\r\n                            }}\r\n                            >\r\n                                {tag}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <h2 className=\"section-title\">인기 영화</h2>\r\n            {loading ? (\r\n                <div style={{ color: 'white', textAlign: 'center', margin: '2rem' }}>로딩 중...</div>\r\n            ) : error ? (\r\n                <div style={{ color: '#ff6464', textAlign: 'center', margin: '2rem' }}>{error}</div>\r\n            ) : (\r\n                <MovieSection movies={\r\n                    movies\r\n                        .slice() // 원본 배열 보호\r\n                        .sort((a, b) => {\r\n                            if (a.rank && b.rank) return a.rank - b.rank;\r\n                            if (a.rank) return -1;\r\n                            if (b.rank) return 1;\r\n                            return 0;\r\n                        })\r\n                        .map(m => ({\r\n                            id: m.tmdb_id,\r\n                            posterUrl: m.poster_url,\r\n                            title: m.title,\r\n                            releaseDate: m.release_date,\r\n                            country: m.country,\r\n                            genre: m.genreAlt || \"\"\r\n                        }))\r\n                } />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}